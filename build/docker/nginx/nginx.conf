user  nginx;
worker_processes  1;

error_log  stderr;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /dev/stdout main;


    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

	server_tokens  off;

    fastcgi_cache_path /dev/shm levels=1:2 keys_zone=cache:100m;
    fastcgi_cache_key "$scheme$request_method$host$request_uri$query_string";

    server {
        listen 80 default_server;
        server_name _;

        if ($http_x_forwarded_proto = 'http'){
            return 301 https://$host$request_uri;
        }

        root   /usr/share/nginx/html/;
        index  app.php index.html;

        client_max_body_size 5M;

        # Compression

        # Enable Gzip compressed.
        gzip on;

        # Enable compression both for HTTP/1.0 and HTTP/1.1.
        gzip_http_version  1.1;

        # Compression level (1-9).
        # 5 is a perfect compromise between size and cpu usage, offering about
        # 75% reduction for most ascii files (almost identical to level 9).
        gzip_comp_level    5;

        # Don't compress anything that's already small and unlikely to shrink much
        # if at all (the default is 20 bytes, which is bad as that usually leads to
        # larger files after gzipping).
        gzip_min_length    256;

        # Compress data even for clients that are connecting to us via proxies,
        # identified by the "Via" header (required for CloudFront).
        gzip_proxied       any;

        # Tell proxies to cache both the gzipped and regular version of a resource
        # whenever the client's Accept-Encoding capabilities header varies;
        # Avoids the issue where a non-gzip capable client (which is extremely rare
        # today) would display gibberish if their proxy gave them the gzipped version.
        gzip_vary          on;

        # Compress all output labeled with one of the following MIME-types.
        gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/rss+xml
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/svg+xml
        image/x-icon
        text/css
        text/plain
        text/x-component;


        location / {
            try_files $uri $uri/ /app.php?$query_string;
        }

        location ~ \.php$ {
            root /var/www/html/web;
            fastcgi_cache ${CACHE_ZONE};
            fastcgi_cache_valid 200 204 1m;
            fastcgi_ignore_headers Cache-Control;
            fastcgi_cache_lock on;
            fastcgi_cache_lock_timeout 10s;

            add_header X-Proxy-Cache $upstream_cache_status;

            fastcgi_pass   ${BACKEND_SERVICE}:9000;
            fastcgi_index  app.php;
            fastcgi_split_path_info ^(.+\.php)(/.*)$;
            fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_read_timeout 900s;
            include        fastcgi_params;
        }

        location ~* \.(jpg|jpeg|png|gif|ico|css|js|eot|ttf|woff|woff2)$ {
            expires max;
            add_header Cache-Control public;
            add_header Access-Control-Allow-Origin *;
            access_log off;
            try_files $uri $uri/ /app.php?$query_string;
        }

        location ~ /\.ht {
            deny all;
        }
    }
}
